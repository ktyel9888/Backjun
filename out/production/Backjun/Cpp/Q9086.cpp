#include <iostream>
#include <string>
#include <vector> // vector를 사용하기 위한 헤더!

//문자열을 입력으로 주면 문자열의 첫 글자와 마지막 글자를 출력하는 프로그램을 작성하시오.

using namespace std;

vector<string> result; // vector를 선언한다. <>안에는 데이터 타입, 그리고 그 이후는 변수명.

int main(){
    int a; // a는 테스트 케이스의 개수. 1<=a<=10
    cin >> a;
    for (int i=0; i<a; i++){
        string s;
        cin >> s;
        string temp_result = "";
        temp_result += s[0];
        temp_result += s[s.length() - 1];

        result.push_back(temp_result); //result 벡터에 데이터를 집어넣는다.
    }

    for(int i=0; i<result.size(); i++){
         cout << result[i] << endl; //해당 데이터에 접근을 위해서는 []가 필요하다.
    }
    return 0;
}

/*
 * ================= C++ Vector 핵심 함수 모음 =================
 * 기능별로 정리된 벡터(vector)의 필수 함수들
 * #include <vector>
 * #include <algorithm> // sort, reverse 등 사용 시 필요
 * ========================================================
 */

// =======================
// ✨ 생성 및 초기화
// =======================

// vector<자료형> 변수명;
// 비어있는 벡터를 생성합니다.
//vector<int> v1;

// vector<자료형> 변수명(크기);
// 기본값(0)으로 초기화된指定된 크기의 벡터를 생성합니다.
//vector<int> v2(5); // [0, 0, 0, 0, 0]

// vector<자료형> 변수명(크기, 초기값);
// 지정된 값으로 초기화된指定된 크기의 벡터를 생성합니다.
//vector<int> v3(5, 10); // [10, 10, 10, 10, 10]

// =======================
// 📥 원소 추가 및 삭제
// =======================

// push_back(값);
// 벡터의 맨 뒤에 원소를 추가합니다. (가장 많이 사용)
//v1.push_back(7);

// pop_back();
// 벡터의 맨 뒤 원소를 제거합니다.
//v1.pop_back();

// clear();
// 벡터의 모든 원소를 제거하여 비웁니다. (size를 0으로 만듦)
//v1.clear();

// insert(위치, 값);
// 지정한 위치에 원소를 삽입합니다. (begin() 이터레이터 활용)
//v1.insert(v1.begin(), 100); // 맨 앞에 100 삽입
//v1.insert(v1.begin() + 2, 50); // 2번 인덱스 위치에 50 삽입

// erase(위치);
// 지정한 위치의 원소를 제거합니다.
//v1.erase(v1.begin() + 1); // 1번 인덱스의 원소 제거

// erase(시작위치, 끝위치);
// 지정한 범위의 원소들을 제거합니다. (끝위치는 포함 안 됨)
//v1.erase(v1.begin(), v1.begin() + 2); // 0, 1번 인덱스의 원소 제거

// =======================
// 🔍 원소 접근
// =======================

// [인덱스];
// 배열처럼 인덱스로 원소에 접근합니다. (가장 일반적)
//cout << v2[0]; // v2의 첫 번째 원소 출력

// at(인덱스);
// 인덱스로 원소에 접근합니다. (범위 검사를 하므로 더 안전함)
//cout << v2.at(0);

// front();
// 벡터의 첫 번째 원소에 접근합니다. (v[0]과 동일)
//cout << v2.front();

// back();
// 벡터의 마지막 원소에 접근합니다. (v[v.size() - 1]과 동일)
//cout << v2.back();

// =======================
// 📏 크기 및 상태 확인
// =======================

// size();
// 벡터에 들어있는 원소의 개수를 반환합니다.
//int current_size = v2.size();

// empty();
// 벡터가 비어있으면 true(1), 아니면 false(0)를 반환합니다.
//if (v1.empty()) { /* do something */ }

// =======================
// 👉 이터레이터 및 알고리즘
// =======================

// begin();
// 벡터의 시작점(첫 번째 원소)을 가리키는 이터레이터를 반환합니다.
// vector<int>::iterator it = v2.begin();

// end();
// 벡터의 끝점(마지막 원소 바로 다음)을 가리키는 이터레이터를 반환합니다.

// sort(시작점, 끝점);
// 지정한 범위의 원소를 오름차순으로 정렬합니다.
//sort(v2.begin(), v2.end());

// reverse(시작점, 끝점);
// 지정한 범위의 원소 순서를 뒤집습니다.
//reverse(v2.begin(), v2.end());